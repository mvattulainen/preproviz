setupclassobject@objectname <- objectname
setupclassobject@parameters <- parameterobject
setupclassobject@data <- dataobject
return (setupclassobject)
}
#' @rdname getparameters
setMethod("getparameters", signature(object = "SetUpClass"), function(object) {
return(object@parameters)}
)
#setGeneric("saveSetUp",function(object){standardGeneric("saveSetUp")})
#
#setMethod("saveSetUp", signature(object = "SetUpClass"), function(object) {
#  fn <- tempfile()
#  save(object, ascii=FALSE, file=fn)
#}
#  )
###
#' @include 04ControlClass.R
NULL
#' defaultParameters
#'
#' defaultParameters include nine experimental constructed features (techically, subclasses)
#' @export
defaultParameters <- initializeparameterclassobject(list("MissingValueShare", "MissingValueToClass", "LOFScore", "MahalanobisToClassCenter", "DistanceToNearest", "LenghtOfIQR", "NearestPointPurity", "ClassificationCertainty", "NeighborhoodDiversity", "ScatterCounter"))
rte <- new.env(parent = emptyenv())
dataobject <- initializedataobject(controlobject)
controlobject <- demoiris
demoiris <- iris
demoiris[10:20,1] <- NA
dataobject <- initializedataobject(controlobject)
controlobject <- demoiris
dataobject <- initializedataobject(controlobject)
str(dataobject)
demoiris[1,1] <- NA
controlobject <- demoiris
str(demoiris)
dataobject <- initializedataobject(controlobject)
str(dataobject)
assign("dataobject", dataobject, envir=rte)
setupobject <- initializesetupclassobject("setupobject", defaultParameters, dataobject)
assign("setupobject", setupobject, envir=rte)
str(setupobject)
controlobject <- initializecontrolclassobject(list("setupobject"))
assign("controlobject", controlobject, envir=rte)
str(controlobject)
analysislist <- reportslist <- vector("list", 1)
parameterclassobject <- rte$setupobject@parameters
str(parameterclassobject)
dataclassobject <- rte$setupobject@data
subclassobjects <- getinitializedsubclassobjects(dataclassobject, parameterclassobject)
str(subclassobjects)
analysisclassobject[[1]]
subclassobjects[[1]]
subclassobjects[[2]]
analysisclassobject <- initializeanalysisclassobject(subclassobjects, dataclassobject)
str(analysisclassobject)
## USES: Analysis
#' A ReportClass is an class containing ggplot2 objects created based on an AnalysisClass object.
#'
#' @slot barplot
#' @slot heatmap
#' @slot multidimensionalscaling
#' @slot variableclusters
#' @slot outliers
#' @slot varimp
#' @slot lofsum
#' @export
setClass("ReportClass", representation(barplot="list", heatmap="list", multidimensionalscaling="list",  variableclusters="list", outliers="list", varimp="list", lofsum="list"))
genv <- new.env()
name <- object@objectname
genv$name <- name
genv$object <- object
object <- analysisclassobject
genv <- new.env()
name <- object@objectname
genv$name <- name
genv$object <- object
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes (value), environment=genv)
g_bar <- g_bar + geom_bar() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
library(ggplot2)
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes (value), environment=genv)
g_bar <- g_bar + geom_bar() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_bar
q <- getlongformatconstructeddata(object)
q
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes (value), environment=genv)
g_bar <- g_bar + geom_bar() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_bar
str(q)
str(analysisclassobject)
analysisclassobject@lofscores
q
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes (value), environment=genv)
g_bar <- g_bar + geom_bar(stat = "identity") + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_bar
str(q)
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes(y=value), environment=genv)
g_bar <- g_bar + geom_bar(stat = "identity") + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_bar
str(q)
q
g_bar <- ggplot2::ggplot(getlongformatconstructeddata(object), aes(value), environment=genv)
g_bar <- g_bar + geom_density() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_bar
## USES: Analysis
#' A ReportClass is an class containing ggplot2 objects created based on an AnalysisClass object.
#'
#' @slot density
#' @slot heatmap
#' @slot cmds
#' @slot variableclusters
#' @slot outliers
#' @slot varimp
#' @slot lofsum
#' @export
setClass("ReportClass", representation(barplot="list", heatmap="list", multidimensionalscaling="list",  variableclusters="list", outliers="list", varimp="list", lofsum="list"))
### CHARACTERIZATION PLOTS
initializeReportClass <- function(object){
# Creating an environment in order to input object name to ggplot object outside data
genv <- new.env()
name <- object@objectname
genv$name <- name
genv$object <- object
## Bar plots
g_density <- ggplot2::ggplot(getlongformatconstructeddata(object), aes(value), environment=genv)
g_density <- g_bar + geom_density() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
# TEST THIS: theme_set(theme_bw())
# g_scattermatrix <- GGally::ggpairs(getminmaxconstructeddata(object), diag = list(continuous = "density"), lower=list(continuous = "smooth"), upper="blank")
## Heat map
g_heatmap <- ggplot2::ggplot(getlongformatminmaxconstructeddata(object), aes(y=Var1,x=Var2), environment=genv)
g_heatmap <- g_heatmap + geom_tile(aes(fill=value)) + scale_fill_gradient(low="white", high="black") + theme_bw() + ggtitle(name) + coord_flip()
### CLUSTERING PLOTS
## Multidimensional scaling
g_scatter <- ggplot2::ggplot(getcmdsdata(object), aes(x=X1, y=X2), environment=genv) + geom_point(shape=1)
g_scatter <- g_scatter + theme_bw() + ggtitle(name)
## Hieararchical clustering ## MINOR ISSUE: NOTE ANALYSIS DONE HERE AND NOT IN ANALYSIS CLASS
g_dendro <- suppressWarnings(ggdendro::ggdendrogram(ClustOfVar::hclustvar(getminmaxconstructeddata(object)), rotate = FALSE, size = 2) + labs(title=genv$name))
g_dendro <- g_dendro + coord_flip()
## LOF Scores
g_outlier <- ggplot2::ggplot(getlofscores(object), aes(x=object.lofscores), environment=genv)
g_outlier <- g_outlier + geom_density()+ theme_bw() + ggtitle(name)
## Variable importance
g_varimp <- ggplot2::ggplot(getvariableimportancedata(object), aes(y=MeanDecreaseAccuracy, x=features), environment=genv)
g_varimp <- g_varimp + geom_bar(stat="identity") + coord_flip() + theme_bw() + ggtitle(name)
##
## Lofsum
g_lofsum <- ggplot2::ggplot(getlofsumdata(object), aes(x=seq, y=variable), environment=genv) + geom_tile(aes(fill=value))
g_lofsum <- g_lofsum + scale_fill_gradient(low="white", high="black") + theme_bw() + ggtitle(name) + ylab("") + theme(axis.title.y = element_blank())
ReportClass <- new("ReportClass", density=list(g_density), heatmap=list(g_heatmap), multidimensionalscaling=list(g_scatter), variableclusters=list(g_dendro), outliers=list(g_outlier), varimp=list(g_varimp), lofsum=list(g_lofsum))
return(ReportClass)
}
## METHODS
#' plotCMDS
#'
#' plotCMDS is a generic function for plotting classical multidimensional scaling of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotCMDS
#' @export
setGeneric("plotCMDS", function(object) {
standardGeneric("plotCMDS")
})
#' @rdname plotCMDS
setMethod("plotCMDS", signature(object = "ReportClass"), function(object) {
object@multidimensionalscaling}
)
#' @rdname plotCMDS
setMethod("plotCMDS", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "multidimensionalscaling"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
###
#' plotBAR
#'
#' plotBAR is a generic function for for plotting barplots of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotBAR
#' @export
setGeneric("plotBAR", function(object) {
standardGeneric("plotBAR")
})
#' @rdname plotBAR
setMethod("plotBAR", signature(object = "ReportClass"), function(object) {
object@barplot}
)
#' @rdname plotBAR
setMethod("plotBAR", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "barplot"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
## OUTLIERS
#' plotOUTLIERS
#'
#' plotOUTLIERS is a generic function for plotting density of LOF scores of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotOUTLIERS
#' @export
setGeneric("plotOUTLIERS", function(object) {
standardGeneric("plotOUTLIERS")
})
#' @rdname plotOUTLIERS
setMethod("plotOUTLIERS", signature(object = "ReportClass"), function(object) {
object@outliers}
)
#' @rdname plotOUTLIERS
setMethod("plotOUTLIERS", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "outliers"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
##
#' plotVARCLUST
#'
#' plotVARCLUST is a generic function for plotting variable clusters of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotVARCLUST
#' @export
setGeneric("plotVARCLUST", function(object) {
standardGeneric("plotVARCLUST")
})
#' @rdname plotVARCLUST
setMethod("plotVARCLUST", signature(object = "ReportClass"), function(object) {
object@variableclusters}
)
#' @rdname plotVARCLUST
setMethod("plotVARCLUST", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "variableclusters"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
### HEATMAP
#' plotHEATMAP
#'
#' plotHEATMAP is a generic function for plotting heatmap of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotHEATMAP
#' @export
setGeneric("plotHEATMAP", function(object) {
standardGeneric("plotHEATMAP")
})
#' @rdname plotHEATMAP
setMethod("plotHEATMAP", signature(object = "ReportClass"), function(object) {
object@heatmap}
)
#' @rdname plotHEATMAP
setMethod("plotHEATMAP", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "heatmap"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
## VARIMP
#' generic function for plotting variable importance
#' @param object (ReportClass or RunClass)
#' @rdname plotVARIMP
#' @export
setGeneric("plotVARIMP", function(object) {
standardGeneric("plotVARIMP")
})
#' @rdname plotVARIMP
setMethod("plotVARIMP", signature(object = "ReportClass"), function(object) {
object@varimp}
)
#' @rdname plotVARIMP
setMethod("plotVARIMP", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "varimp"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
## LOFSUM
#' plotLOFSUM
#'
#' plotLOFSUM is a generic function for lof sum of constructed features
#' @param object (ReportClass or RunClass)
#' @rdname plotLOFSUM
#' @export
setGeneric("plotLOFSUM", function(object) {
standardGeneric("plotLOFSUM")
})
#' @rdname plotLOFSUM
setMethod("plotLOFSUM", signature(object = "ReportClass"), function(object) {
object@lofsum}
)
#' @rdname plotLOFSUM
setMethod("plotLOFSUM", signature(object = "RunClass"), function(object) {
listcmds <- lapply(object@reports, function(x) slot(x, "lofsum"))
listcmds <- lapply(listcmds, `[[`, 1)
do.call(gridExtra::grid.arrange,  listcmds)
}
)
g_density <- ggplot2::ggplot(getlongformatconstructeddata(object), aes(value), environment=genv)
g_density <- g_density + geom_density() + facet_wrap(~Var2, scales="free") + theme_bw() + ggtitle(name)
g_density
g_heatmap <- ggplot2::ggplot(getlongformatminmaxconstructeddata(object), aes(y=Var1,x=Var2), environment=genv)
g_heatmap <- g_heatmap + geom_tile(aes(fill=value)) + scale_fill_gradient(low="white", high="black") + theme_bw() + ggtitle(name) + coord_flip()
g_heatmap
g_scatter <- ggplot2::ggplot(getcmdsdata(object), aes(x=X1, y=X2), environment=genv) + geom_point(shape=1)
g_scatter <- g_scatter + theme_bw() + ggtitle(name)
g_scatter
g_dendro <- suppressWarnings(ggdendro::ggdendrogram(ClustOfVar::hclustvar(getminmaxconstructeddata(object)), rotate = FALSE, size = 2) + labs(title=genv$name))
g_dendro <- g_dendro + coord_flip()
g_dendro
g_outlier <- ggplot2::ggplot(getlofscores(object), aes(x=object.lofscores), environment=genv)
g_outlier <- g_outlier + geom_density()+ theme_bw() + ggtitle(name)
g_outlier
g_density
g_scatter
g_outlier
g_outlier <- ggplot2::ggplot(getlofscores(object), aes(x=object.lofscores), environment=genv)
g_outlier <- g_outlier + geom_density()+ theme_bw() + ggtitle(name) + xlab("LOF score")
g_outlier
g_varimp <- ggplot2::ggplot(getvariableimportancedata(object), aes(y=MeanDecreaseAccuracy, x=features), environment=genv)
g_varimp <- g_varimp + geom_bar(stat="identity") + coord_flip() + theme_bw() + ggtitle(name)
g_varimp
g_lofsum <- ggplot2::ggplot(getlofsumdata(object), aes(x=seq, y=variable), environment=genv) + geom_tile(aes(fill=value))
g_lofsum <- g_lofsum + scale_fill_gradient(low="white", high="black") + theme_bw() + ggtitle(name) + ylab("") + theme(axis.title.y = element_blank())
g_lofsum
iris2 <- iris
iris2[sample(1,150,30), 1] <- NA
iris2[sample(1,150,30), 5] <- "Setosa"
iris2[sample(1,150,30), 5] <- iris2$Species[2]
iris2
iris2 <- iris
iris2[sample(1,150,30), 1] <- NA
iris2[sample(1,150,30), 5] <- levels(iris2$Species)[2]
iris2
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2
iris2 <- rbind(iris2, iris2[120:150,])
iris2
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(iris))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(iris2))
control <- initializecontrolclassobject(list("setup1", "setup2"))
result <- preproviz(control)
library(preproviz)
result <- preproviz(control)
plotHEATMAP(result)
plotVARCLUST(result)
library(preproviz)
library(roxygen2)
roxygenize()
roxygenize()
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
result <- preproviz(compare(list(iris, iris2)
)
)
q <- compare(list(iris,iris2))
q
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
result <- preproviz(compare(list(iris, iris2)))
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
result <- preproviz(compare(list(iris,iris2)))
dataframes <- list(iris,iris2)
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(dataframes[[1]]))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(dataframes[[1]]))
controlcompare <- initializecontrolclassobject(list("setup1", "setup2"))
result <- preproviz(controlcompare)
plotVARCLUST(result)
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
result <- preproviz(compare(list(iris, iris2)))
plotVARCLUST(result)
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2]
iris2 <- rbind(iris2, iris2[120:150,])
result <- preproviz(compare(list(iris,iris2)))
q <- compare(list(iris,iris2))
result <- preproviz(q)
q
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(iris))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(iris2))
control <- initializecontrolclassobject(list("setup1", "setup2"))
control
result <- preproviz(control)
w <- preproviz(q)
control <- compare(iris, iris2)
control <- compare(list(iris, iris2))
result <- preproviz(control)
library(preproviz)
result <- preproviz(iris)
plotDENSITY(result)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA # adding missing values
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2] # adding inconsistency
testcontrol <- compare(list(iris, iris2))
result <- preproviz(testcontrol)
testcontrol
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA # adding missing values
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2] # adding inconsistency
testcontrol <- compare(list(iris, iris2))
result <- preproviz(testcontrol)
plotVARCLUST(result)
testcontrol <- compare(list(A=iris, B=iris2))
result <- preproviz(testcontrol)
plotVARCLUST(result)
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(iris))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(iris2))
control <- initializecontrolclassobject(list("setup1", "setup2"))
result <- preproviz(control)
plotVARCLUST(result)
dataframes <- list(iris, iris2)
str(dataframes)
names(dataframes)
names(dataframes) <- c("A", "B")
library(preproviz)
iris2 <- iris
iris2[sample(1:150,30), 1] <- NA # adding missing values
iris2[sample(1:150,30), 5] <- levels(iris2$Species)[2] # adding inconsistency
testcontrol <- compare(list(iris, iris2))
result <- preproviz(testcontrol)
plotVARCLUST(result)
dataframes <- list(iris, iris2)
if (class(dataframe)!="list") {stop("Argument 'dataframes' must be a list.")}
if (class(dataframes)!="list") {stop("Argument 'dataframes' must be a list.")}
if (length(dataframes)!=2) {stop("Argument 'dataframes' must have exactly two elements")}
names(dataframes) <- c("A", "B")
q <- dataframes[[1]]
str(q)
str(dataframes)
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(dataframes[[1]]))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(dataframes[[2]]))
controlcompare <- initializecontrolclassobject(list("setup1", "setup2"))
q <- preproviz(controlcompare)
compare <- function(dataframes){
if (class(dataframes)!="list") {stop("Argument 'dataframes' must be a list.")}
if (length(dataframes)!=2) {stop("Argument 'dataframes' must have exactly two elements")}
A <- dataframes[[1]]
B <- dataframes[[2]]
setup1 <- initializesetupclassobject("setup1", defaultParameters, initializedataobject(A))
setup2 <- initializesetupclassobject("setup2", defaultParameters, initializedataobject(B))
controlcompare <- initializecontrolclassobject(list("setup1", "setup2"))
assign("setup1", setup1, envir=globalenv())
assign("setup2", setup2, envir=globalenv())
assign("controlcompare", controlcompare, envir=globalenv())
}
testcontrol <- compare(list(iris, iris2))
result <- preproviz(testcontrol)
plotVARCLUST(result)
library(devtools)
library(roxygen2)
roxygenise()
document()
library(preproviz)
document()
document()
document()
document()
roxygenise()
document()
library(preproviz)
roxygenise()
document()
library(preproviz)
library(preproviz)
roxygenise()
library(roxygen2)
library(devtools)
roxygenize()
document()
library(preproviz)
library(preproviz)
library(devtools)
document()
library(preproviz)
devtools::document()
library(preproviz)
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
devtools::document()
library(preproviz)
